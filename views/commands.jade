extends layout

block content
	.container
		.row
			.col-md-12
				div.page-header
					h1 Commands
		.row
			.col-md-6#panels1
				.panel.panel-default.mikuia-blue-glow#newCommand_panel
					.panel-heading Add a command
					.panel-body
						label(for='newCommand_name') 
							| Name
							b(style='color: red;')  (WITHOUT EXCLAMATION MARKS)
						input.form-control#newCommand_name(type='text', name='newCommand_name', placeholder='(example: rank)')
						label(for='newCommand_command') Command
						select.form-control#newCommand_command(name='newCommand_command')
						br
						button.btn.btn-primary.btn-sm.pull-right#newCommand_add Add
			.col-md-6#panels2

block footerScript
	script(type='text/javascript').
		listeners.push('commands', 'commands:add', 'commands:remove', 'commands:save')
		var commands = {}
		var lastPanel = 1

		function parseName(name) {
			return name.split('.').join('\\.').split('!').join('\\!')
		}

		function removeCommand(command) {
			io.emit('commands.remove', {
				name: command
			})
		}

		function save(command, name) {
			var settings = {}
			for(var settingKey in commands[command].settings) {
				switch(commands[command].settings[settingKey].type) {
					case 'radio':
						settings[settingKey] = $('#command_' + name + '_settings_' + settingKey).prop('checked')
						break
					case 'text':
						settings[settingKey] = $('#command_' + name + '_settings_' + settingKey).val()
						break
				}
			}
			io.emit('commands.save', {
				name: name,
				settings: settings
			})
		}

		io.emit('getCommands')

		io.on('commands', function(data) {
			commands = data.commands
			for(var commandKey in data.commands) {
				var command = data.commands[commandKey]
				$('#newCommand_command').append('<option name="' + commandKey + '">' + commandKey + ' - ' + command.description +' (' + command.plugin + ')</option>')
			}
		})

		io.on('commands:add', function(data) {

			var parsedName = parseName(data.name)

			var code = '<div style="display: none;" id="command_' + data.name + '"> \
				<div class="panel panel-default"> \
					<div class="panel-heading">' + data.name + '</div> \
					<div class="panel-body"> \
						<small class="text-muted">' + data.command + ' - ' + commands[data.command].description + ' \
							<ul id="command_' + data.name + '_arguments"></ul> \
						</small> \
						<br /> \
						<button type="button" onclick="removeCommand(\'' + data.name + '\')" class="btn btn-danger btn-xs pull-right">Remove</button> \
					</div>  \
				</div> \
			</div>'

			if(lastPanel == 1) {
				$('#panels2').prepend(code)
				lastPanel = 2
			} else if(lastPanel == 2) {
				$('#newCommand_panel').after(code)
				lastPanel = 1
			}

			if(commands[data.command].arguments != undefined) {
				$('#command_' + parsedName + '_arguments').before('<br />Arguments:')
				for(var argumentKey in commands[data.command].arguments) {
					var argument = commands[data.command].arguments[argumentKey]
					if(argument.optional) {
						argument.description += ' (optional)'
					}
					$('#command_' + parsedName + '_arguments').append('<b>' + argumentKey + '</b> - ' + argument.description)
				}
			}
			if(commands[data.command].guide != undefined) {
				$('#command_' + parsedName + ' .panel-heading').append('<a href="/command/' + data.command + '" class="btn btn-warning btn-xs pull-right">View the guide for this command</a>')
			}
			if(commands[data.command].settings != undefined) {
				if(data.settings != undefined) {
					var settings = data.settings
				} else {
					var settings = {}
				}

				$('#command_' + parsedName + ' .panel-body small').append('Settings:<br />')
				for(var settingKey in commands[data.command].settings) {
					var setting = commands[data.command].settings[settingKey]
					var id = 'command_' + data.name + '_settings_' + settingKey
					switch(setting.type) {
						case 'radio':
							$('#command_' + parsedName + ' .panel-body small').append(
								'<label><input class="form-control" type="checkbox" name="' + id + '" id="' + id + '"> ' + setting.description + '</label><br /> \
							')
							break
						case 'text':
							var value = ""
							if(settings[settingKey] != undefined) {
								value = settings[settingKey]
							}
							$('#command_' + parsedName + ' .panel-body small').append(
								'<div class="input-group"> \
									<span class="input-group-addon">' + setting.name + '</span> \
									<input class="form-control" type="text" name="' + id + '" id="' + id + '" placeholder="' + setting.description + '" value="' + value + '"></span><br /> \
								</div>')
							break
					}
				}
				$('#command_' + parsedName + ' .panel-body button').before('<button type="button" onclick="save(\'' + data.command + '\', \'' + parsedName + '\')" class="btn btn-primary btn-xs pull-right" id="command_' + parsedName + '_save">Save</button>')
			}
			$('#command_' + parsedName).fadeIn('slow')
		})

		io.on('commands:save', function(data) {
			if(data.reply == 'OK') {

				var parsedName = parseName(data.command)

				$('#command_' + parsedName + '_save').removeClass('btn-primary').html('Saved!')
				flashNavbar('success', 'Settings for ' + data.command + ' command have been saved!')
				setTimeout(function() {
					$('#command_' + parsedName + '_save').addClass('btn-primary').html('Save')
				}, 3000)
			}
		})

		io.on('commands:remove', function(data) {

			var parsedName = parseName(data.name)

			$('#command_' + parsedName).fadeOut('slow', function() {
				$('#command_' + parsedName).remove()
				flashNavbar('success', 'Command "' + data.name + '" has been removed!')
			})
		})

		$('#newCommand_add').click(function() {
			io.emit('commands.add', {
				name: $('#newCommand_name').val(),
				command: $('#newCommand_command option:selected').attr('name')
			})
			flashNavbar('success', 'Command "' + $('#newCommand_name').val() + '" has been added!')
		})